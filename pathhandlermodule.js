// Generated by CoffeeScript 2.7.0
//#############################################################################
//region debug
var findRelevantFiles, isDirectory, isFile, isRelevantFile, log, mapSourcesToOutputDirectory, olog, outputs, sourceFileEnding, sourceToOutputPath, sources;

import {
  createLogFunctions
} from "thingy-debug";

({log, olog} = createLogFunctions("pathhandlermodule"));

import * as pathModule from "path";

import fs from "fs";


//###########################################################
sources = null;

outputs = null;

//###########################################################
sourceFileEnding = ".spec.js";

//###########################################################
export var digestInputArgument = function(input) {
  var inputAbsolute;
  log("digestInputArgument");
  if (pathModule.isAbsolute(input)) {
    inputAbsolute = input;
  } else {
    inputAbsolute = pathModule.resolve(process.cwd(), input);
  }
  if (!fs.existsSync(inputAbsolute)) {
    throw new Error(`Specified input path does not exist! (${inputAbsolute})`);
  }
  if (isDirectory(inputAbsolute)) {
    sources = findRelevantFiles(inputAbsolute);
  } else {
    sources = [inputAbsolute];
  }
  olog({sources});
};


//###########################################################
export var digestOutputArgument = function(output) {
  var outputAbsolute;
  log("digestOutputArgument");
  if (pathModule.isAbsolute(output)) {
    outputAbsolute = output;
  } else {
    outputAbsolute = pathModule.resolve(process.cwd(), output);
  }
  if (isDirectory(outputAbsolute)) {
    outputs = mapSourcesToOutputDirectory(outputAbsolute);
  } else if (sources.length !== 1) {
    throw new Error("Single output file specified - but source is not 1 file!");
  } else {
    outputs = [sourceToOutputPath(sources[0], outputAbsolute)];
  }
  olog({outputs});
};

export var getInputOutputPairs = function() {
  var i, input, j, len, output, pair, result, source;
  log("getInputOutputPairs");
  result = [];
  for (i = j = 0, len = sources.length; j < len; i = ++j) {
    source = sources[i];
    input = source;
    output = outputs[i];
    pair = {input, output};
    result.push(pair);
  }
  return result;
};

//###########################################################
//region internal functions
mapSourcesToOutputDirectory = function(outputDirectoryAbsolute) {
  var j, len, result, sourceAbsolute;
  result = [];
  for (j = 0, len = sources.length; j < len; j++) {
    sourceAbsolute = sources[j];
    result.push(sourceToOutputPath(sourceAbsolute, outputDirectoryAbsolute));
  }
  return result;
};

sourceToOutputPath = function(sourceAbsolute, outputDirectoryAbsolute) {
  var name;
  log("defaultOutputForSource");
  name = pathModule.basename(sourceAbsolute);
  if (name.endsWith(sourceFileEnding)) {
    name = name.replace(sourceFileEnding, ".js");
  }
  return pathModule.resolve(outputDirectoryAbsolute, name);
};

//###########################################################
findRelevantFiles = function(path) {
  var allEntries, allRelevant, entry, entryAbsolute, j, len;
  log("findRelevantFiles");
  allEntries = fs.readdirSync(path);
  allRelevant = [];
  for (j = 0, len = allEntries.length; j < len; j++) {
    entry = allEntries[j];
    entryAbsolute = pathModule.resolve(path, entry);
    if (isRelevantFile(entryAbsolute)) {
      allRelevant.push(entryAbsolute);
    }
  }
  return allRelevant;
};

isRelevantFile = function(path) {
  log("isRelevantFile");
  if (!isFile(path)) {
    return false;
  }
  if (!path.endsWith(sourceFileEnding)) {
    return false;
  }
  return true;
};

//###########################################################
isDirectory = function(path) {
  var err, stat;
  try {
    stat = fs.statSync(path);
    return stat.isDirectory();
  } catch (error) {
    err = error;
    //# probably does not exist
    return false;
  }
};

isFile = function(path) {
  var err, stat;
  try {
    stat = fs.statSync(path);
    return stat.isFile();
  } catch (error) {
    err = error;
    //# probably does not exist
    return false;
  }
};

//endregion
