// Generated by CoffeeScript 2.7.0
//###########################################################
//region debug
var ait, extractStepAction, extractTestName, log, olog, outputTemplate, tit, tne, translate;

import {
  createLogFunctions
} from "thingy-debug";

({log, olog} = createLogFunctions("translationmodule"));

import fs from "fs";

import M from "mustache";

import * as pathHandler from "./pathhandlermodule.js";


//###########################################################
tit = "it('"; //# test identifying token

tne = "', "; //# test name end

ait = "await driver."; //# action identifying token


//###########################################################
outputTemplate = `export const testName = '{{{testName}}}';

export async function run (browserUtils, resultUtils) {

    const { browser, By, Key } = browserUtils
    const { chai, transitionTime, takeScreenshot } = resultUtils

    await browser.get("{{{testURL}}}")
    await transitionTime()
    await takeScreenshot(0)

    //load assertions?

    {{#testSteps}}
    {{{stepAction}}}
    await transitionTime()
    await takeScreenshot({{stepNumber}})
    //step{{stepNumber}} assertions?
    
    {{/testSteps}}

};`;

//###########################################################
export var translateAllFiles = function() {
  var allInputOutputPairs, i, len, original, outputFile, pair;
  log("translateAllFiles");
  allInputOutputPairs = pathHandler.getInputOutputPairs();
  for (i = 0, len = allInputOutputPairs.length; i < len; i++) {
    pair = allInputOutputPairs[i];
    original = fs.readFileSync(pair.input, {
      encoding: 'utf8'
    });
    outputFile = translate(original);
    fs.writeFileSync(pair.output, outputFile);
  }
};

//###########################################################
translate = function(original) {
  var cObj, line, num, stepAction, stepNumber, testLinesReversed, testName, testSteps, testURL, tests, translated;
  log("translate");
  translated = "// Nothing translated!'";
  //# We assume only one it("testName", async function(){...}) exists
  tests = original.split(tit);
  if (tests.length <= 1) {
    throw new Error("No it(' found in script!");
  }
  if (tests.length > 2) {
    throw new Error("Unexpectedly many it(' found in script!");
  }
  testLinesReversed = tests[1].split("\n").reverse();
  olog(testLinesReversed);
  line = testLinesReversed.pop();
  olog(testLinesReversed);
  testName = extractTestName(line);
  //# TODO figure out how we get the testURL...
  testURL = "https://secrets-cockpit.extensivlyon.coffee";
  testSteps = [];
  num = 1;
  while (true) {
    line = testLinesReversed.pop();
    if (typeof line !== "string") {
      break;
    }
    stepAction = extractStepAction(line);
    if (stepAction == null) {
      continue;
    }
    stepNumber = num++;
    testSteps.push({stepNumber, stepAction});
  }
  cObj = {testName, testURL, testSteps};
  olog(cObj);
  //# render the template
  translated = M.render(outputTemplate, cObj);
  return translated;
};

//###########################################################
extractTestName = function(line) {
  var end;
  log("extractTestName");
  // log line
  // offset = line.indexOf(tit) if offset < 0 then throw new Error("No #{tit} found in the assumed headline!")
  // line = line.slice(offset + tit.length)
  log(line);
  end = line.indexOf(tne);
  if (end < 0) {
    throw new Error(`No ${tne} found in the assumed headline!`);
  }
  return line.slice(0, end);
};

extractStepAction = function(line) {
  log("extractStepAction");
  log(line);
  if (line.indexOf(ait) < 0) {
    return null;
  }
  return line.trim();
};
